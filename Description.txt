Description

Background
A Web proxy is a software entity that functions as an intermediary between a Web client (browser) and a Web server. The Web proxy intercepts Web requests from clients and reformulates the requests for transmission to a Web server. When a response is received from the Web server, the proxy sends the response back to the client. From the server's point of view, the proxy is the client, since that is where the request comes from. Similarly, from the client's point of view, the proxy is the server, since that is where the response comes from. A Web proxy thus provides a single point of control to regulate Internet access between clients and servers. A lot of Calgary schools use Web proxies to limit the types of Web sites that students are allowed to access. Commercially available Web proxies, such as Net Nanny or Barracuda, are some examples of this, as is the open-source proxySquid, which also provides Web object caching.

Technical Requirements
In this assignment, you will implement your very own Web proxy, in either C or C++. The goals of the assignment are to build a properly functioning Web proxy for simple Web pages, and then use your proxy to randomly change some of the text or HTML content before it is delivered to the browser. There is no requirement for Web object caching in your proxy at all.
There are two main pieces of functionality needed in your proxy. The first is the ability to parse an HTTP request to determine if the requested content should be treated normally (i.e., obtained from the server and returned to the client error-free), or if the content should be altered by inserting spelling errors. The second is the ability to insert random spelling errors in some appropriate way within a text or HTML file. Your proxy should have a configurable parameter for the number of errors, which might vary between 0 and 5, for example. It is up to you to determine what the errors look like, and where they go, but the errors should be randomized so that they are different every time the Web page gets downloaded. Imagine how confused your Web master will be when Web pages keep changing every time they reload them. Hahahahaha!!!
The most important HTTP command for your Web proxy to handle is the "GET" request, which specifies the URL for an object to be retrieved. In the basic operation of your proxy, it should be able to parse, understand, and forward to the Web server a (possibly modified) version of the client HTTP request. Similarly, the proxy should be able to parse, understand, and return to the client a (possibly modified) version of the HTTP response that the Web server provided to the proxy. Please give some careful thought to how your proxy handles commonly occurring HTTP response codes, such as:
	•	200 (OK)
	•	206 (Partial Content)
	•	301 (Moved Permanently) (a.k.a. HTTP redirection)
	•	302 (Found) (a.k.a. HTTP redirection)
	•	304 (Not Modified)
	•	403 (Forbidden)
	•	404 (Not Found)
You will need at least one TCP socket (i.e., SOCK_STREAM) for client-proxy communication, and at least one additional TCP socket for each Web server you are talking to for proxy-server communication. (If you want your proxy to support multiple concurrent HTTP transactions, you will need to fork child processes for request handling as well. See optional bonus part below.) Each child process or thread will use its own socket instances for its communications with the client and with the server.
When implementing your proxy, feel free to compile and run your Web proxy on any suitable department machine, or even your home machine or laptop, but please be aware that you will ultimately have to demo your proxy to your TA on campus at some point. You should try to access your proxy from your favourite Web browser (e.g., Internet Explorer, Mozilla Firefox, Chrome, Safari), and computer (either on campus or at home). To test the proxy, you will have to configure your Web browser to use your specific Web proxy (e.g., look for menu selections like Tools, Internet Options, Proxies, Advanced, LAN Settings).
As you design and build your Web proxy, give careful consideration to how you will debug and test it. For example, you may want to print out information about requests and responses received, processed, forwarded, redirected, or altered. Once you become confident with the basic operation of your Web proxy, you can toggle off the verbose debugging output. If you are testing on your home network, you can also use tools like WireSharkor tcpdump to collect network packet traces. By studying the HTTP messages and TCP/IP packets going to and from your proxy, you might be able to figure out what is working, what isn't working, and why.
